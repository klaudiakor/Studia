> Zawartosc:
    
    Rozwiazanie cwiczenia 8 (Klient - Serwer: kolejki komunikatow):
    a) serwer.c - Program pelni role serwera w zadanym problemie. Na poczatku tworzy i otwiera wlasna 
                kolejke komunikatow, do odbierania, w trybie blokujacym (o nazwie zdefioniowanej w pliku 
                config.h, ktory wspoldzieli z programem klienta), nastepnie probuje odebrac komunikaty 
                ze swojej kolejki (dzialajac w nieskonczonej petli). Po odebraniu komunikatu otwiera
                kolejke klienta w trybie do nadawania komunikatow (nazwa kolejki zostala mu przekazana
                w komunikacie - ma postac /PID), z komunikatu odczytuje odpowiednie dzialanie, ktore
                wykonuje i odsyla wynik w komunikacie do kolejki klienta, zamyka kolejke klienta. 
                W przypadku przerwania (SIGINIT) lub zakonczenia programu zamyka i usuwa wlasna kolejke.
                Pomiedzy odbieraniem a wysylaniem komunikatu umieszczona jest funkcja sleep z losowym czasem
                uspienia z przedzialu (0-2s), aby symulowac szybkosc dzialania programu. 

    b) klient.c - Program pelni role konsumenta w zadanym problemie. Na poczatku tworzy i otwiera wlasna
                kolejke komunikatow, do odbierania, w trybie blokujacym o nazwie /PID, nastepnie otwiera
                kolejke serwera w trybie do nadawania komunikatow. W nieskonczonej petli wczytuje 
                z klawiatury zadane dzialanie matematyczne, ktore przesyla do kolejki serwera razem ze swoja 
                wartoscia PID. Pomiedzy wysylaniem a odbieraniem komunikatu umieszczona jest funkcja sleep 
                z losowym czasem uspienia z przedzialu (0-2s), aby symulowac szybkosc dzialania programu.
                Odbiera komunikat od serwera z wynikiem dzialania. Przerywa petle po odczytaniu EOF (ctrl D), 
                po czym zamyka i usuwa wlasna kolejke oraz zamyka kolejke serwera. Zamyka rowniez kolejki 
                w przypadku przerwania (SIGINIT) lub zakonczenia programu.

    c) config.h  - Plik naglowkowy, wspolny dla serwera i klienta. Zawiera nazwe kolejki serwera
                oraz zdefiniowana wielkosc N_MAX, ktora jest wielkoscia buforow dla obu procesow.

    d) mq_lib.c - Plik zrodlowy, zawierający definicje funkcji biblioteki MessageQueueFunctions.
            Funkcje:  
            > mqd_t MQcreate(const char *name, int oflag, mode_t mode, struct mq_attr *attr)
              tworzy kolejke komunikatow o nazwie name, w trybie zadanym przez oflag, o prawach dostepu - mode
              attr - struktura atrybutow kolejki
              zwraca deskryptor utworzonej kolejki
            > mqd_t MQopen(const char *name, int oflag)
              otwiera kolejke komunikatow o nazwie - name i w trybie zadanym przez oflag
              zwraca jej deskryptor
            > void MQclose(mqd_t mqdes)
              zamyka kolejke komunikatow o zadanym deskryptorze
            > void MQunlink(const char *name)
              usuwa kolejke komunikatow o nazwie - name
            > void MQsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned int msg_prio)
              wysyla komunikat do kolejki o deskryptorze mqdes
            > int MQreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned int *msg_prio)
              odbiera komunikat z kolejki o deskryptorze mqdes i zwraca ilosc odczytanych bajtow

    e) mq_lib.h - Plik naglowkowy zawirajacy deklaracje funkcji z biblioteki MessageQueueFunctions.

----------------------------------------------------------------------------------------------------

> Jak uruchomic programy:
    Katalog zawiera program Makefile do kompilacji, linkowania 
    i uruchomienia powyzszego programu, a takze czyszczenia katalogu 
    i jego archiwizacji.

        - Aby skompilowac nalezy wykonac:   make all

        - Aby uruchomić program, nalezy wykonac: make run

        - Aby wyczyscic zawartosc katalogu (usunac zbedne pliki), 
          nalezy wykonac:   make clean

        - W celu archiwizacji oraz kompresji katalogu 
          nalezy wykonac:   make tar

---------------------------------------------------------------------------------------------------

